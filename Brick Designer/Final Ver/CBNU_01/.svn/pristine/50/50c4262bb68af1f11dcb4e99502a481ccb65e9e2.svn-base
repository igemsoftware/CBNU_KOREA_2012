using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Data.OleDb;

namespace BrickDesigner
{
    public partial class Form_Cloning : Form
    {

        static class SR
        {
            public const string str_ecor1_seq = "gaattc";
            public const string str_ecor1_name = "Ecor1";
            public const string str_xba1_seq = "tctaga";
            public const string str_xba1_name = "Xba1";
            public const string str_spe1_seq = "actagt";
            public const string str_spe1_name = "Spe1";
            public const string str_pst1_seq = "ctgcag";
            public const string str_pst1_name = "Pst1";
        }

        DBconnector connector;

        string str_sequence;

        SortedList<int, string> sl_SR;

        public Form_Cloning()
        {
            InitializeComponent();
            connector = new DBconnector();


            list_from_DB();
            
        }

        //////////////////////////////////////////////////////////////////////////
        // 클로닝툴을 누르면 백본을 선택할 수 있다.
        // 백본을 선택해서 셀렉트 버튼을 누르게 되면
        // 백본의 서열을 이용해서 패널에 그림을 그리게 되고
        // 그림은 제한요소의 위치를 포함한다.
        // 그리고 제한요소들을 리스트박스에서 선택하면 그림에서 제한요소가 부각되며
        // 제한요소를 하나씩 선택하고 OK버튼을 누르면
        // 폼은 꺼지며 메인에서 둥근형태로 표현하게 된다.
        //////////////////////////////////////////////////////////////////////////


        /// <summary>
        /// Plasmid_Backbone을 가져와서 리스트에 뿌려주기
        /// </summary>
        private void list_from_DB()
        {
            try
            {
                string str_qu = "select part_name, part_short_desc from part where part_type = 'plasmid_backbone' and part_short_name is not null;";

                OleDbDataReader oddr = connector.select_Data(str_qu);

                ListViewItem item;

                lv_All.Groups.Add("기존브릭", "기존브릭");

                while (oddr.Read())
                {
                    item = new ListViewItem(oddr.GetString(0));
                    item.SubItems.Add(oddr.GetString(1));
                    item.Group = lv_All.Groups["기존브릭"];

                    lv_All.Items.Add(item);
                }

                str_qu = "select part_name, part_desc from userbricks where part_type = 'plasmid_backbone'";

                oddr = connector.select_Data(str_qu);

                lv_All.Groups.Add("유저브릭", "유저브릭");

                while (oddr.Read())
                {
                    item = new ListViewItem(oddr.GetString(0));
                    item.SubItems.Add(oddr.GetString(1));
                    item.Group = lv_All.Groups["유저브릭"];

                    lv_All.Items.Add(item);
                }
                oddr.Close();
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine(ex.Message);
                MessageBox.Show("불러올 수 없습니다.");
            }
        }


        /// <summary>
        /// select 버튼을 눌렀을 경우 sequence 가져오기
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bt_Select_Click(object sender, EventArgs e)
        {


            if (lv_All.SelectedItems.Count > 0)
            {

                ListViewItem lvi_selectedItem = lv_All.SelectedItems[0];

                if (lvi_selectedItem.Group.Name == "기존브릭")
                {
                    string str_qu = "select sequences.seq_data from sequences, part where part.part_name = '" + lvi_selectedItem.Text + "' and part.part_id = sequences.part_id";

                    OleDbDataReader oddr = connector.select_Data(str_qu);

                    while (oddr.Read())
                    {
                        str_sequence = oddr.GetString(0);
                    }

                }
                else if (lvi_selectedItem.Group.Name == "유저브릭")
                {
                    string str_qu = "select part_seq from userbricks where part_name = '" + lvi_selectedItem.Text + "'";

                    OleDbDataReader oddr = connector.select_Data(str_qu);

                    while (oddr.Read())
                    {
                        str_sequence = oddr.GetString(0);
                    }
                }

                search_RS();
                
            }


        }


        /// <summary>
        /// 시퀀스에서 제한효소절단위치 찾기
        /// </summary>
        private void search_RS()
        {
            sl_SR = new SortedList<int, string>();


            int i = 0;

            while (str_sequence.IndexOf(SR.str_ecor1_seq, i) != -1)
            {
                i = str_sequence.IndexOf(SR.str_ecor1_seq, i);
                sl_SR.Add(i, SR.str_ecor1_name);
                i += 6;
            }
            i = 0;
            while (str_sequence.IndexOf(SR.str_xba1_seq, i) != -1)
            {
                i = str_sequence.IndexOf(SR.str_xba1_seq, i);
                sl_SR.Add(i, SR.str_xba1_name);
                i += 6;
            }
            i = 0;
            while (str_sequence.IndexOf(SR.str_spe1_seq, i) != -1)
            {
                i = str_sequence.IndexOf(SR.str_spe1_seq, i);
                sl_SR.Add(i, SR.str_spe1_name);
                i += 6;
            }
            i = 0;
            while (str_sequence.IndexOf(SR.str_pst1_seq, i) != -1)
            {
                i = str_sequence.IndexOf(SR.str_pst1_seq, i);
                sl_SR.Add(i, SR.str_pst1_name);
                i += 6;
            }

            if ((sl_SR.Values.Contains(SR.str_ecor1_name) || sl_SR.Values.Contains(SR.str_xba1_name)) && (sl_SR.Values.Contains(SR.str_spe1_name) || sl_SR.Values.Contains(SR.str_pst1_name)))
            {

                // 위치를 퍼센트로 계산해서 

            }
            else
            {
                MessageBox.Show("다른 백본을 선택해주세요");
            }
        }
        
    }
}
